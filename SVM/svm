import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
style.use('ggplot')

# Here we will create an SVM class
# If we run a class, only the __init__() method would
# run. Other methods would run only if called upon
class Support_Vector_Machine:
    def __init__(self, visualisation = True):
        self.visualisation = visualisation
        # The segment in 1 would be red and that
        # in -1 would be blue
        self.colors = {1: 'r', -1: 'b'}
        if(self.visualisation):
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(1, 1, 1)

    # For training the model
    def fit(self, data):
        self.data = data

        # { ||w|| : [w, b] } <- That's how this dict would be populated
        opt_dict = {}

        transforms = [[1, 1],
                      [-1, 1],
                      [-1, -1],
                      [1, -1]]

        all_data = []
        for yi in self.data:
            for featureset in self.data[yi]: # Fix this
                for feature in featureset:
                    all_data.append(feature)

        self.max_feature_value = max(all_data)
        self.min_feature_value = min(all_data)
        all_data = None
        # pass # Placeholder for future code

        # support vectors yi(xi.w + b) = 1
        # 
        step_sizes = [self.max_feature_value * 0.1,
                      self.max_feature_value * 0.01,
                    # This is expensive as the step size is small
                      self.max_feature_value * 0.001]

        # Can we run step fn to these three simultaneously 

        # extremely expensive
        b_range_multiple = 5

        # we do not need to take as small steps as we take for w
        b_multiple = 5

        latest_optimum = self.max_feature_value * 10
        
        for step in step_sizes:
            w = np.array([latest_optimum, latest_optimum])

            # The reason we can do this is because we are using Convex Optimisation
            optimised = False
            while not optimised:
                # np . a range also gives step and is more efficient
                for b in np.arange(-1 * (self.max_feature_value * b_range_multiple), self.max_feature_value * b_range_multiple, step * b_multiple):
                    for transformation in transforms:
                        w_t = w * transformation
                        found_option = True
                        # weakest link in the SVM functionality
                        # SNO attemps to fix this a bitb) 
                        # yi(xi.w + b) >= 1
                        # 
                        ## add a break here later
                        for i in self.data:
                            for xi in self.data[i]:
                                yi = i
                                if not yi * (np.dot(w_t, xi) + b) >= 1:
                                    found_option = False
                        if found_option:
                            opt_dict[np.linalg.norm(w_t)] = [w_t, b]
                if w[0] < 0:
                    optimised = True
                    print("Optimised a Step")
                else:
                    # w = [5, 5]
                    # step = 1
                    # w - [step, step] = [4, 4]
                    w = w - step

            norms = sorted([n for n in opt_dict])
            # ||w|| : [w, b]
            opt_choice = opt_dict[norms[0]]
            self.w = opt_choice[0]
            self.b = opt_choice[1]
            latest_optimum = opt_choice[0][0] + step * 2
            
    # To predict based on a separate data than training
    # We have to figure out what w and b is
    def predict(self, features):
        # sign( x.w + b  )
        classification = np.sign(np.dot(np.array(features), self.w) + self.b)

        if classification != 0 and self.visualisation:
            self.ax.scatter(features[0], features[1], s = 200, marker='*', c = self.colors[classification])
        
        return classification

    def visualize(self):
        [[self.ax.scatter(x[0], x[1], s = 100, color = self.colors[i]) for x in data_dict[i]] for i in data_dict]

        # hyperplane = x.w + b
        # gives hyperplane values where v is the value we are seeking
        # v = x.w + b
        # positive support vector, psv = 1
        # nsv = -1
        # dec = 0 (decision boundary)
        def hyperplane(x, w, b, v):
            return (-w[0] * x - b + v) / w[1]

        datarange = (self.min_feature_value * 0.9, self.max_feature_value * 1.1)
        hyp_x_min = datarange[0]
        hyp_x_max = datarange[1]

        # (w.x + b) = 1
        # positive support vector
        psv1 = hyperplane(hyp_x_min, self.w, self.b, 1) # scalar value
        psv2 = hyperplane(hyp_x_max, self.w, self.b, 1) # scalar value
        self.ax.plot([hyp_x_min, hyp_x_max], [psv1, psv2], 'k') # k is black

        # (w.x + b) = -1
        # negative support vector
        nsv1 = hyperplane(hyp_x_min, self.w, self.b, -1) # scalar value
        nsv2 = hyperplane(hyp_x_max, self.w, self.b, -1) # scalar value
        self.ax.plot([hyp_x_min, hyp_x_max], [nsv1, nsv2], 'k')

        # (w.x + b) = 0
        # decision boundary
        db1 = hyperplane(hyp_x_min, self.w, self.b, 0) # scalar value
        db2 = hyperplane(hyp_x_max, self.w, self.b, 0) # scalar value
        self.ax.plot([hyp_x_min, hyp_x_max], [db1, db2], 'y--')

        plt.show()
# data dict would be the sample data where 1 and -1
# denote the classes and they corresponding to a
# numpy array that is a list of lists
data_dict = {-1: np.array([[1, 7],
                           [2, 8],
                           [3, 8]
                           ]),
             1: np.array([[5, 1],
                          [6, -1],
                          [7, 3]])
            }

svm = Support_Vector_Machine()
svm.fit(data = data_dict)
svm.visualize()
